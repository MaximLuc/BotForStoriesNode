import type { Telegraf } from "telegraf";
import { Types } from "mongoose";
import type { MyContext } from "../shared/types";
import { navigate } from "./ui/navigate";
import { registerAddStoryTextActions } from "../features/stories/addStoryText.actions";
import { registerCoverActions } from "../features/stories/cover.actions";
import { registerReadHandlers } from "../features/reading/read.handlers";
import { registerDraftInputCollector } from "../features/stories/addStoryText.collector";
import { registerDraftFinishHandlers } from "../features/stories/addStoryText.finish";
import { registerFileImportActions } from "../features/stories/fileImport.actions";
import { registerAdminDeleteHandlers } from "../features/stories/adminDelete.handlers";
import { registerAdminCoverHandlers } from "../features/stories/adminCover.handlers";
import { registerBroadcastActions } from "../features/broadcast/broadcast.actions";
import { registerBroadcastSweeper } from "../features/broadcast/broadcast.sweeper";
import { registerSubscriptionAdminActions } from "../features/subscription/subscription.actions";
import { registerSubscriptionUserActions } from "../features/subscription/subscription.user.actions";
import { registerBuyEndingActions } from "../features/reading/buyEnding.actions";
import { isAdmin } from "../shared/utils";
import { addTokens } from "../features/tokens/wallet.service";

function bindDual(
  bot: Telegraf<MyContext>,
  opts: { text: string; action: string },
  handler: (ctx: MyContext) => Promise<any> | any
) {
  bot.hears(opts.text, handler);
  bot.action(opts.action, handler);
}

export function registerRouter(bot: Telegraf<MyContext>) {
  bot.start(async (ctx) => navigate(ctx, "main"));

  bindDual(bot, { text: "–ú–µ–Ω—é", action: "main" }, async (ctx) =>
    navigate(ctx, "main")
  );

  bindDual(bot, { text: "–ü—Ä–æ—Ñ–∏–ª—å", action: "profile" }, async (ctx) =>
    navigate(ctx, "profile")
  );

  bot.action("profile:subscription", async (ctx) =>
    navigate(ctx, "profileSubscription")
  );
  bot.action("profile:statistics", async (ctx) =>
    navigate(ctx, "profileUserStats")
  );

  bindDual(bot, { text: "–ê–¥–º–∏–Ω", action: "admin" }, async (ctx) =>
    navigate(ctx, "admin")
  );

  bindDual(
    bot,
    { text: "–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏", action: "read_stories" },
    async (ctx) => navigate(ctx, "readStories")
  );

  bot.action("admin:stories", async (ctx) => navigate(ctx, "storiesList"));
  bot.action("admin:statistics", async (ctx) => navigate(ctx, "statistics"));

  bindDual(
    bot,
    { text: "–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–º", action: "admin:add_story_text" },
    async (ctx) => navigate(ctx, "addStoryText")
  );

  bot.action(/^read_stories:page:(\d+)$/, async (ctx) =>
    navigate(ctx, "readStories")
  );

  bot.action("support", async (ctx) => {
    await ctx.answerCbQuery();

    const text = `
üõ† *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*

–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ *—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –∏ –ø–µ—Ä–µ–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ.

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Äî
–Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: [@tema_cl](https://t.me/tema_cl)
`;

    await ctx.editMessageText(text.trim(), {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "‚Ü©Ô∏é –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main" }]],
      },
      link_preview_options: { is_disabled: true },
    });
  });

  bot.action("help", async (ctx) => {
  await ctx.answerCbQuery();

  const text = `
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ *–Æ–ª—è –° "Bot"*!  
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ü–æ–≤–∫–∞–º–∏.  
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ü–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ‚≠ê

üìö *–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*
- *–í–°–ï –ò–°–¢–û–†–ò–ò* ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.
- *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ—é —Ä–æ–ª—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
- *–ê–¥–º–∏–Ω* ‚Äî —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
- *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞* ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

üß† –°–æ–≤–µ—Ç: –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ—Ç —Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å,  
—Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á—Ç–µ–Ω–∏—é –ø–æ–∑–∂–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö.
`;

  await ctx.editMessageText(text.trim(), {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "support" }],
        [{ text: "‚Ü©Ô∏é –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main" }],
      ],
    },
    link_preview_options: { is_disabled: true },
  });
});

  bot.catch((err, ctx) => {
    console.error("Bot error for update", ctx.update.update_id, err);
  });

  bot.command("give_tokens", async (ctx) => {
    if (!ctx.state.user || !isAdmin(ctx.state.user))
      return ctx.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞");
    const parts = (ctx.message as any).text.trim().split(/\s+/);
    const amount = Math.max(1, Number(parts[1] ?? 1));
    const userId = (ctx.state.user as any)?._id as Types.ObjectId;
    await addTokens(userId, amount);
    return ctx.reply(`–í—ã–¥–∞–Ω–æ ${amount} —Ç–æ–∫–µ–Ω(–æ–≤).`);
  });

  registerReadHandlers(bot);
  registerAddStoryTextActions(bot);
  registerDraftInputCollector(bot);
  registerDraftFinishHandlers(bot);
  registerCoverActions(bot);
  registerFileImportActions(bot);
  registerAdminDeleteHandlers(bot);
  registerAdminCoverHandlers(bot);
  registerBroadcastActions(bot);
  registerBroadcastSweeper(bot);
  registerSubscriptionAdminActions(bot);
  registerSubscriptionUserActions(bot);
  registerBuyEndingActions(bot);
}
