import { buildInlineMain } from "./menus.js";
import { renderAddStoryTextScreen } from "./screens.addStoryText.js";
import { renderReadStoriesScreen } from "./screens.readStories.js";
import { renderProfileUserStatsScreen } from "./screens.profileStats.js";
import { renderAdminStatsScreen } from "./screens.adminStats.js";
import { isAdmin, isPremium } from "../../shared/utils.js";
import type { MyContext } from "../../shared/types.js";
import { Markup } from "telegraf";

export type ScreenId =
  | "main"
  | "profile"
  | "profileSubscription"
  | "profileUserStats"
  | "admin"
  | "storiesList"
  | "statistics"
  | "addStoryText"
  | "readStories";

export type ScreenPayload = {
  text: string;
  inline?: ReturnType<typeof Markup.inlineKeyboard>;
  setReplyKeyboard?: boolean;
  replyNoticeText?: string;
  parseMode?: "Markdown" | "HTML";
};

type ScreenRenderer = (
  ctx: MyContext
) => Promise<ScreenPayload> | ScreenPayload;

function formatDate(d?: string | number | Date) {
  if (!d) return "-";
  const dt = new Date(d);
  return `${String(dt.getDate()).padStart(2, "0")}.${String(
    dt.getMonth() + 1
  ).padStart(2, "0")}.${dt.getFullYear()}`;
}

const screens: Record<ScreenId, ScreenRenderer> = {
  main: (ctx) => ({
    text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–Æ–ª—è –° "Bot"*, ${
      ctx.from?.first_name || "–¥–æ—Ä–æ–≥–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫!"
    }!  –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏, —Ñ–∏–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüå∏`,
    inline: buildInlineMain(ctx.state.user),
    setReplyKeyboard: true,
    replyNoticeText: "",
  }),

  profile: (ctx) => ({
    text: `–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`,
    inline: Markup.inlineKeyboard([
      [
        Markup.button.callback("–ü–æ–¥–ø–∏—Å–∫–∞", "profile:subscription"),
        Markup.button.callback("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "profile:statistics"),
      ],
      [Markup.button.callback("–ù–∞–∑–∞–¥", "main")],
    ]),
  }),

  profileSubscription: (ctx) => {
    const u = ctx.state.user;
    const premium = isPremium(u);
    const expiresAt = (u as any)?.premiumUntil;
    const base = premium
      ? `‚úÖ –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>${formatDate(
          expiresAt
        )}</b>.`
      : `‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.`;

    return {
      text: `${base}\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±—É–¥—É—â–∏–µ —Ñ–∏—á–∏.`,
      inline: Markup.inlineKeyboard([
        [Markup.button.callback("‚Ü©Ô∏é –í –ø—Ä–æ—Ñ–∏–ª—å", "profile")],
        [Markup.button.callback("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "main")],
      ]),
    };
  },

  admin: (ctx) => {
    if (!ctx.state.user || !isAdmin(ctx.state.user)) {
      return {
        text: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.",
        inline: buildInlineMain(undefined),
      };
    }
    return {
      text: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
      inline: Markup.inlineKeyboard([
        [Markup.button.callback("üßë‚Äçüíª–°–¢–ê–¢–ò–°–¢–ò–ö–êüßë‚Äçüíª", "admin:statistics")],
        [Markup.button.callback("–û–±–ª–æ–∂–∫–∏", "admin:cover_list")],
        [
          Markup.button.callback(
            "üìú–î–û–ë–ê–í–ò–¢–¨ –ò–°–¢–û–†–ò–Æüìú",
            "admin:add_story_text"
          ),
        ],
        [Markup.button.callback("üì®–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ªüì®", "admin:import_file")],
        [Markup.button.callback("üóë–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—éüóë", "admin:delete_list")],
        [Markup.button.callback('üì£ –†–∞—Å—Å—ã–ª–∫–∞', 'admin:broadcast')],
        [Markup.button.callback("üì¢ –ö–∞–Ω–∞–ª—ã", "admin:channels")],
        [Markup.button.callback("–ù–∞–∑–∞–¥", "main")],
      ]),
    };
  },

  storiesList: () => ({
    text: "–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞)",
    inline: Markup.inlineKeyboard([[Markup.button.callback("–ù–∞–∑–∞–¥", "admin")]]),
  }),

  addStoryText: (ctx) => renderAddStoryTextScreen(ctx),

  readStories: (ctx) => renderReadStoriesScreen(ctx),

  profileUserStats: (ctx) => renderProfileUserStatsScreen(ctx),

  statistics: (ctx) => renderAdminStatsScreen(ctx),
};

export function getScreen(ctx: MyContext, id: ScreenId): ScreenPayload {
  const r = screens[id];
  if (!r)
    return { text: "–≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", inline: buildInlineMain(undefined) };
  return r(ctx) as ScreenPayload;
}
