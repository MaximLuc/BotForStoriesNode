import type { MyContext } from "../../shared/types.js";
import { Markup } from "telegraf";
import {
  getOrCreateDraft,
  canCreate,
} from "../../features/stories/draft.service.js";
import type { DraftStoryDoc, DraftEnding } from "../../db/models/DraftStory.js";
import type { InlineKeyboardButton } from "telegraf/types";

function preview(str?: string | null, words = 8) {
  if (!str) return "‚Äî";
  const s = str.trim().split(/\s+/).slice(0, words).join(" ");
  return s + (str.trim().length > s.length ? "‚Ä¶" : "");
}
const accessLabel = (rank?: number) => (rank === 1 ? "üîí –ø—Ä–µ–º–∏—É–º" : "üåê –≤—Å–µ–º");

const cb = (text: string, data: string): InlineKeyboardButton => ({
  text,
  callback_data: data,
});

export async function renderAddStoryTextScreen(ctx: MyContext) {
  const tgId = ctx.state.user?.tgId;
  if (!tgId) {
    return {
      text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      inline: Markup.inlineKeyboard([[cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin")]]),
    };
  }

  const d: DraftStoryDoc = await getOrCreateDraft(tgId);

  if (d.pendingInput && (d.pendingInput as any).kind === "accessStory") {
    return {
      text: `–î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: —Å–µ–π—á–∞—Å *${accessLabel(
        d.minRank
      )}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø:`,
      inline: Markup.inlineKeyboard([
        [cb("üåè –í–°–ï–ú", "draft:access_story:all")],
        [cb("üë• –¢–û–õ–¨–ö–û –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú", "draft:access_story:premium")],
        [cb("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", "draft:cancel_access")],
      ]),
    };
  }
  if (d.pendingInput && (d.pendingInput as any).kind === "accessEnding") {
    const i = (d.pendingInput as any).index as number;
    const e = (d.endings as DraftEnding[])[i];
    return {
      text: `–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é #${i + 1}: —Å–µ–π—á–∞—Å *${accessLabel(
        e?.minRank
      )}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø:`,
      inline: Markup.inlineKeyboard([
        [cb("üåè –í–°–ï–ú", `draft:end_access_set:${i}:all`)],
        [cb("üë• –¢–û–õ–¨–ö–û –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú", `draft:end_access_set:${i}:premium`)],
        [cb("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", "draft:cancel_access")],
      ]),
    };
  }

  const rows: InlineKeyboardButton[][] = [];

  rows.push([cb("ü™ù–ó–ê–î–ê–¢–¨ –ù–ê–ó–í–ê–ù–ò–ï", "draft:set_title")]);
  rows.push([cb("üó£Ô∏è–î–û–ë–ê–í–ò–¢–¨ –¢–ï–ö–°–¢ –î–û –í–´–ë–û–†–ê", "draft:set_intro")]);
  rows.push([
    cb(
      `üîê–î–û–°–¢–£–ü –ö –ò–°–¢–û–†–ò–ò: ${accessLabel(d.minRank)}`,
      "draft:ask_access_story"
    ),
  ]);
  rows.push([cb("üìé–î–û–ë–ê–í–ò–¢–¨ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï ", "draft:add_ending")]);
  (d.endings as DraftEnding[]).forEach((e, i) => {
    rows.push([
      cb(`üñãÔ∏è–ù–ê–ó–í–ê–ù–ò–ï ‚Ññ${i + 1}`, `draft:set_end_title:${i}`),
      cb(`üìÉ–¢–ï–ö–°–¢ ‚Ññ${i + 1}`, `draft:set_end_text:${i}`),
    ]);
    rows.push([
      cb(`üóëÔ∏è–£–î–ê–õ–ò–¢–¨ ‚Ññ${i + 1}`, `draft:del_end:${i}`),
      cb(`üîê–î–û–°–¢–£–ü: ${accessLabel(e?.minRank)}`, `draft:ask_end_access:${i}`),
    ]);
  });

  const ready = canCreate({
    title: d.title ?? undefined,
    intro: d.intro ?? undefined,
    endings: d.endings as DraftEnding[],
  });
  const finalRow: InlineKeyboardButton[] = [];
  if (ready) finalRow.push(cb("‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "draft:commit"));
  finalRow.push(cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin"));
  rows.push(finalRow);

  const endingsPreview = d.endings.length
    ? (d.endings as DraftEnding[])
        .map(
          (e, i) =>
            `#${i + 1} ${e.title ? `¬´${e.title}¬ª` : "‚Äî"}  ¬∑  ${accessLabel(
              e?.minRank
            )}\n‚Ü≥ ${preview(e.text, 10)}`
        )
        .join("\n")
    : "‚Äî";

  const text = `–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (—Ñ–æ—Ä–º–∞)

–ù–∞–∑–≤–∞–Ω–∏–µ: ${d.title ?? "‚Äî"}
–ù–∞—á–∞–ª–æ: ${preview(d.intro)}
–î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: ${accessLabel(d.minRank)}

–û–∫–æ–Ω—á–∞–Ω–∏—è:
${endingsPreview}
`;

  return {
    text,
    inline: Markup.inlineKeyboard(rows),
  };
}
