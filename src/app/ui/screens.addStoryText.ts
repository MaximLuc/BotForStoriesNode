import type { MyContext } from '../../shared/types'
import { Markup } from 'telegraf'
import { getOrCreateDraft, canCreate } from '../../features/stories/draft.service'
import type { DraftStoryDoc, DraftEnding } from '../../db/models/DraftStory'
import type { InlineKeyboardButton } from 'telegraf/types'

function previewIntro(intro?: string | null) {
  if (!intro) return '‚Äî'
  const s = intro.trim().split(/\s+/).slice(0, 8).join(' ')
  return s + (intro.trim().length > s.length ? '‚Ä¶' : '')
}

const cb = (text: string, data: string): InlineKeyboardButton => ({ text, callback_data: data })

export async function renderAddStoryTextScreen(ctx: MyContext) {
  const tgId = ctx.state.user?.tgId
  if (!tgId) {
    return {
      text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      inline: Markup.inlineKeyboard([[cb('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin')]]),
    }
  }

  const d: DraftStoryDoc = await getOrCreateDraft(tgId)

  const rows: InlineKeyboardButton[][] = []

  rows.push([cb('üìù –ó–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'draft:set_title')])
  rows.push([cb('‚úçÔ∏è –ó–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏', 'draft:set_intro')])
  rows.push([cb('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ', 'draft:add_ending')])

  ;(d.endings as DraftEnding[]).forEach((_: DraftEnding, i: number) => {
    rows.push([cb(`‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è #${i + 1}`, `draft:set_end_title:${i}`),
               cb(`üßæ –¢–µ–∫—Å—Ç #${i + 1}`, `draft:set_end_text:${i}`)])
    rows.push([cb(`üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ #${i + 1}`, `draft:del_end:${i}`)])
  })

  const ready = canCreate({
    title: d.title ?? undefined,
    intro: d.intro ?? undefined,
    endings: d.endings as DraftEnding[],
  })
  const finalRow: InlineKeyboardButton[] = []
  if (ready) finalRow.push(cb('‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'draft:commit'))
  finalRow.push(cb('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin'))
  rows.push(finalRow)

  const endingsPreview: string =
    d.endings.length
      ? (d.endings as DraftEnding[])
          .map((e: DraftEnding, i: number) =>
            `#${i + 1} ${e.title ? `¬´${e.title}¬ª` : '‚Äî'} / ${e.text ? '‚úÖ' : '‚Äî'}`
          )
          .join('; ')
      : '‚Äî'

  const text =
`–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (—Ñ–æ—Ä–º–∞)

–ù–∞–∑–≤–∞–Ω–∏–µ: ${d.title ?? '‚Äî'}
–ù–∞—á–∞–ª–æ: ${previewIntro(d.intro ?? undefined)}
–û–∫–æ–Ω—á–∞–Ω–∏—è: ${endingsPreview}
–î–æ—Å—Ç—É–ø: ${d.minRank === 1 ? '—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º' : '–¥–ª—è –≤—Å–µ—Ö'}
`

  return {
    text,
    inline: Markup.inlineKeyboard(rows),
  }
}
