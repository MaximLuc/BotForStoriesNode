import type { MyContext } from '../../shared/types'
import { Markup } from 'telegraf'
import { getOrCreateDraft, canCreate } from '../../features/stories/draft.service'
import type { DraftStoryDoc, DraftEnding } from '../../db/models/DraftStory'
import type { InlineKeyboardButton } from 'telegraf/types'

function preview(str?: string | null, words = 8) {
  if (!str) return '‚Äî'
  const s = str.trim().split(/\s+/).slice(0, words).join(' ')
  return s + (str.trim().length > s.length ? '‚Ä¶' : '')
}
const accessLabel = (rank?: number) => rank === 1 ? 'üîí –ø—Ä–µ–º–∏—É–º' : 'üåê –≤—Å–µ–º'

const cb = (text: string, data: string): InlineKeyboardButton => ({ text, callback_data: data })

export async function renderAddStoryTextScreen(ctx: MyContext) {
  const tgId = ctx.state.user?.tgId
  if (!tgId) {
    return {
      text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      inline: Markup.inlineKeyboard([[cb('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin')]]),
    }
  }

  const d: DraftStoryDoc = await getOrCreateDraft(tgId)

  if (d.pendingInput && (d.pendingInput as any).kind === 'accessStory') {
    return {
      text: `–î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: —Å–µ–π—á–∞—Å *${accessLabel(d.minRank)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø:`,
      inline: Markup.inlineKeyboard([
        [cb('üåê –í—Å–µ–º', 'draft:access_story:all')],
        [cb('üîí –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π', 'draft:access_story:premium')],
        [cb('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', 'draft:cancel_access')],
      ]),
    }
  }
  if (d.pendingInput && (d.pendingInput as any).kind === 'accessEnding') {
    const i = (d.pendingInput as any).index as number
    const e = (d.endings as DraftEnding[])[i]
    return {
      text: `–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é #${i+1}: —Å–µ–π—á–∞—Å *${accessLabel(e?.minRank)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø:`,
      inline: Markup.inlineKeyboard([
        [cb('üåê –í—Å–µ–º', `draft:end_access_set:${i}:all`)],
        [cb('üîí –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π', `draft:end_access_set:${i}:premium`)],
        [cb('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', 'draft:cancel_access')],
      ]),
    }
  }

  const rows: InlineKeyboardButton[][] = []

  rows.push([cb('üìù –ó–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'draft:set_title')])
  rows.push([cb('‚úçÔ∏è –ó–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏', 'draft:set_intro')])
  rows.push([cb(`üîê –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: ${accessLabel(d.minRank)}`, 'draft:ask_access_story')])
  rows.push([cb('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ', 'draft:add_ending')])

  ;(d.endings as DraftEnding[]).forEach((e, i) => {
    rows.push([
      cb(`‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ #${i+1}`, `draft:set_end_title:${i}`),
      cb(`üßæ –¢–µ–∫—Å—Ç #${i+1}`, `draft:set_end_text:${i}`),
    ])
    rows.push([
      cb(`üóë –£–¥–∞–ª–∏—Ç—å #${i+1}`, `draft:del_end:${i}`),
      cb(`üîê –î–æ—Å—Ç—É–ø: ${accessLabel(e?.minRank)}`, `draft:ask_end_access:${i}`),
    ])
  })

  const ready = canCreate({
    title: d.title ?? undefined,
    intro: d.intro ?? undefined,
    endings: d.endings as DraftEnding[],
  })
  const finalRow: InlineKeyboardButton[] = []
  if (ready) finalRow.push(cb('‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'draft:commit'))
  finalRow.push(cb('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin'))
  rows.push(finalRow)

  const endingsPreview =
    d.endings.length
      ? (d.endings as DraftEnding[])
          .map((e, i) =>
            `#${i+1} ${e.title ? `¬´${e.title}¬ª` : '‚Äî'}  ¬∑  ${accessLabel(e?.minRank)}\n‚Ü≥ ${preview(e.text, 10)}`
          )
          .join('\n')
      : '‚Äî'

  const text =
`–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (—Ñ–æ—Ä–º–∞)

–ù–∞–∑–≤–∞–Ω–∏–µ: ${d.title ?? '‚Äî'}
–ù–∞—á–∞–ª–æ: ${preview(d.intro)}
–î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: ${accessLabel(d.minRank)}

–û–∫–æ–Ω—á–∞–Ω–∏—è:
${endingsPreview}
`

  return {
    text,
    inline: Markup.inlineKeyboard(rows),
  }
}
