import type { InlineKeyboardMarkup } from "telegraf/types";
import { Markup } from "telegraf";
import type { MyContext } from "../../shared/types";
import {
  getUserStatsByTgId,
  getTopRereads,
  getTopEndingChoices,
} from "../../features/stats/userStats.service";
function fmtMs(ms?: number) {
  if (!ms || ms <= 0) return "-";
  const s = Math.round(ms / 1000);
  const m = Math.floor(s / 60);
  const sec = s % 60;
  return m > 0 ? `${m} –º–∏–Ω ${sec} —Å–µ–∫` : `${sec} —Å–µ–∫`;
}

function html(s = "") {
  return s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function cut(s?: string, n = 40) {
  if (!s) return "";
  return s.length > n ? s.slice(0, n - 1) + "‚Ä¶" : s;
}

export async function renderProfileUserStatsScreen(ctx: MyContext) {
  const tgId = ctx.state.user?.tgId;
  const stats = await getUserStatsByTgId(tgId);

  const storiesStartedCount = stats?.storiesStartedCount ?? 0;
  const storiesCompletedCount = stats?.storiesCompletedCount ?? 0;
  const endingsChosenCount = stats?.endingsChosenCount ?? 0;
  const dropsCount = stats?.dropsCount ?? 0;
  const avgReadTimeMs = stats?.avgReadTimeMs ?? 0;
  const longestStoryChars = stats?.longestStoryChars ?? 0;

  const topRereads = await getTopRereads(stats, 3);
  const topEndings = await getTopEndingChoices(stats, 3);

  const topRereadsTxt = topRereads.length
    ? topRereads
        .map(
          (r, i) => `${i + 1}. ${html(cut(r.title) || r.storyId)} ‚Äî ${r.count}√ó`
        )
        .join("\n")
    : "‚Äî";

  const topEndingsTxt = topEndings.length
    ? topEndings
        .map((e, i) => {
          const left = html(cut(e.title) || e.storyId);
          const right = e.label ? ` (–≤–∞—Ä–∏–∞–Ω—Ç: ${html(e.label)})` : "";
          return `${i + 1}. ${left}${right} ‚Äî ${e.count}√ó`;
        })
        .join("\n")
    : "‚Äî";

  const text = `–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ó–∞–ø—É—â–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: <b>${storiesStartedCount}</b>
–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–æ –∫–æ–Ω—Ü–∞: <b>${storiesCompletedCount}</b>
–í—ã–±–æ—Ä–æ–≤ –∫–æ–Ω—Ü–æ–≤–æ–∫: <b>${endingsChosenCount}</b>
–ë—Ä–æ—à–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: <b>${dropsCount}</b>

–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: <b>${fmtMs(avgReadTimeMs)}</b>
–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: <b>${longestStoryChars}</b> —Å–∏–º–≤–æ–ª–æ–≤

<b>–¢–æ–ø –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º—ã—Ö</b>:
${topRereadsTxt}

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—ã–±–æ—Ä—ã –∫–æ–Ω—Ü–æ–≤–æ–∫</b>:
${topEndingsTxt}`;

  const inlineKb = Markup.inlineKeyboard([
    [Markup.button.callback("‚Ü©Ô∏é –í –ø—Ä–æ—Ñ–∏–ª—å", "profile")],
    [Markup.button.callback("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "main")],
  ]);

  return {
    text,
    inline: inlineKb,
    parseMode: "HTML" as const,
  };
}
