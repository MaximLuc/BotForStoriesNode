import type { Telegraf } from "telegraf"
import type { MyContext } from "../../shared/types.js"
import { Markup } from "telegraf"
import { RequiredChannel } from "../../db/models/RequiredChannel.js"
import { isAdmin } from "../../shared/utils.js"
import { getLastMessageId } from "../../app/middlewares/singleMessage.js"

function ensureMarkup(inline?: ReturnType<typeof Markup.inlineKeyboard>) {
  return inline?.reply_markup ? { reply_markup: inline.reply_markup } : {}
}

function parseUsername(input: string): string | null {
  const t = input.trim()
  if (!t) return null
  if (t.startsWith("@")) return t.slice(1).trim()
  const m = t.match(/(?:https?:\/\/)?t\.me\/([A-Za-z0-9_]+)/i)
  return m ? m[1] : null
}

async function buildChannelsText(notice?: string) {
  const list = await RequiredChannel.find().lean()
  const header = `üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n`
  const rows = list.length
    ? list.map(c => `‚Ä¢ ${c.title || (c.username ? `@${c.username}` : c.chatId)}`).join("\n")
    : "–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ."
  const tip =
    `\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>@username</b> –∏–ª–∏ —Å—Å—ã–ª–∫—É <b>https://t.me/‚Ä¶</b>, —á—Ç–æ–±—ã <b>–¥–æ–±–∞–≤–∏—Ç—å</b>.\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—Ç –∂–µ @username –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã <b>—É–¥–∞–ª–∏—Ç—å</b>.\n` +
    `–í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.`
  const body = `${header}${rows}${tip}`
  return notice ? `${notice}\n\n${body}` : body
}

async function redrawChannelsScreen(ctx: MyContext, notice?: string) {
  const text = await buildChannelsText(notice)
  const kb = Markup.inlineKeyboard([[Markup.button.callback("‚Ü©Ô∏é –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", "admin")]])

  try {
    const res = await ctx.editMessageText(text, { parse_mode: "HTML", ...ensureMarkup(kb) })
    let mid: number | undefined
    if (typeof res !== "boolean" && res && "message_id" in res) {
      mid = (res as any).message_id
    } else if (ctx.callbackQuery && "message" in ctx.callbackQuery) {
      mid = (ctx.callbackQuery as any).message?.message_id
    }
    if (mid) (ctx.state as any).rememberMessageId?.(mid)
    return
  } catch {  }

  const chatId = ctx.chat?.id
  const lastId = chatId ? getLastMessageId(chatId) : undefined
  if (chatId && lastId) {
    try {
      await ctx.telegram.editMessageText(chatId, lastId, undefined, text, {
        parse_mode: "HTML",
        ...ensureMarkup(kb),
      })
      ;(ctx.state as any).rememberMessageId?.(lastId)
      return
    } catch {}
  }

  const sent = await ctx.reply(text, { parse_mode: "HTML", ...ensureMarkup(kb) })
  ;(ctx.state as any).rememberMessageId?.(sent.message_id)
}

export function registerSubscriptionAdminActions(bot: Telegraf<MyContext>) {

 
  bot.action("admin:channels", async (ctx) => {
    if (!ctx.state.user || !isAdmin(ctx.state.user)) return ctx.answerCbQuery()
    await ctx.answerCbQuery()
    return redrawChannelsScreen(ctx)
  })

 
  bot.on("message", async (ctx, next) => {
    if (!ctx.state.user || !isAdmin(ctx.state.user)) return next()

    const msg: any = ctx.message
    if (!msg || typeof msg !== "object" || !("text" in msg)) return next()

    const input: string = (msg.text as string).trim()
    const username = parseUsername(input)
    if (!username) return next() 

  
    const chatId = ctx.chat?.id
    const msgId = msg?.message_id
    if (chatId && msgId) {
      try { await ctx.telegram.deleteMessage(chatId, msgId) } catch {}
    }

    const existing = await RequiredChannel.findOne({ username }).lean()
    if (existing) {
      await RequiredChannel.deleteOne({ _id: (existing as any)._id })
      return redrawChannelsScreen(ctx, `üóë –ö–∞–Ω–∞–ª @${username} —É–¥–∞–ª—ë–Ω.`)
    }

    const chat = await ctx.telegram.getChat(`@${username}`).catch(() => null)
    if (!chat) {
      return redrawChannelsScreen(ctx, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ç—É–¥–∞ –∫–∞–∫ –∞–¥–º–∏–Ω.")
    }

    const chatIdStr = String((chat as any).id)
    const title = "title" in (chat as any) ? ((chat as any).title as string) : undefined

    await RequiredChannel.create({ chatId: chatIdStr, title, username })
    return redrawChannelsScreen(ctx, `‚úÖ –ö–∞–Ω–∞–ª @${username} –¥–æ–±–∞–≤–ª–µ–Ω.`)
  })
}
