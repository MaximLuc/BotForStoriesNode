import type { Telegraf } from "telegraf";
import type { MyContext } from "../../shared/types.js";
import { Markup } from "telegraf";
import {
  getOrCreateDraft,
  setPending,
  resetPending,
  setField,
  setEndingTitle,
  setEndingText,
  removeEnding,
  commitDraftToStory,
  canCreate,
  setEndingAccess,
  setStoryAccess,
} from "./draft.service.js";
import type { DraftEnding } from "../../db/models/DraftStory.js";
import { renderAddStoryTextScreen } from "../../app/ui/screens.addStoryText.js";
import { getLastMessageId } from "../../app/middlewares/singleMessage.js";
import { isAdmin } from "../../shared/utils.js";
import { aggStart } from "./input.aggregator.js";

let ACTIONS_REGISTERED = false;

function html(s = "") {
  return s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

async function updateMenu(ctx: MyContext, text: string, inline?: any) {
  const kb = inline
    ? inline.reply_markup
      ? inline
      : { reply_markup: inline }
    : undefined;
  try {
    await ctx.editMessageText(text, { parse_mode: "HTML", ...kb });
    return;
  } catch {}
  const sent = await ctx.reply(text, { parse_mode: "HTML", ...kb });
  (ctx.state as any)?.rememberMessageId?.(sent.message_id);
}

async function renderForm(ctx: MyContext, hint?: string) {
  const payload = await renderAddStoryTextScreen(ctx);
  const text = hint ? `${payload.text}\n\n${hint}` : payload.text;
  await updateMenu(ctx, text, payload.inline);
}

function inputWaitKb() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("‚úÖ –ì–æ—Ç–æ–≤–æ", "draft:finish_input")],
    [Markup.button.callback("‚úñ –û—Ç–º–µ–Ω–∞", "draft:cancel_input")],
    [Markup.button.callback("‚Ü©Ô∏é –ù–∞–∑–∞–¥", "admin:add_story_text")],
  ]);
}

export function registerAddStoryTextActions(bot: Telegraf<MyContext>) {
  if (ACTIONS_REGISTERED) return;
  ACTIONS_REGISTERED = true;

  bot.action("draft:set_title", async (ctx) => {
    const tgId = ctx.state.user!.tgId;
    await setPending(tgId, { kind: "title" });
    aggStart(tgId, ctx.chat!.id, "title");
    await ctx.answerCbQuery();
    await updateMenu(
      ctx,
      "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ —á–∞—Å—Ç—è–º–∏). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>.",
      inputWaitKb()
    );
  });

  bot.action("draft:set_intro", async (ctx) => {
    const tgId = ctx.state.user!.tgId;
    await setPending(tgId, { kind: "intro" });
    aggStart(tgId, ctx.chat!.id, "intro");
    await ctx.answerCbQuery();
    await updateMenu(
      ctx,
      "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ <b>–Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏</b> (–º–æ–∂–Ω–æ —á–∞—Å—Ç—è–º–∏). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>.",
      inputWaitKb()
    );
  });

  bot.action(/^draft:set_end_title:(\d+)$/, async (ctx) => {
    const i = Number(ctx.match[1]);
    const tgId = ctx.state.user!.tgId;
    await setPending(tgId, { kind: "endingTitle", index: i });
    aggStart(tgId, ctx.chat!.id, "endingTitle");
    await ctx.answerCbQuery();
    await updateMenu(
      ctx,
      `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è #${
        i + 1
      }</b>. –ù–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.`,
      inputWaitKb()
    );
  });

  bot.action(/^draft:set_end_text:(\d+)$/, async (ctx) => {
    const i = Number(ctx.match[1]);
    const tgId = ctx.state.user!.tgId;
    await setPending(tgId, { kind: "endingText", index: i });
    aggStart(tgId, ctx.chat!.id, "endingText");
    await ctx.answerCbQuery();
    await updateMenu(
      ctx,
      `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ <b>—Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è #${
        i + 1
      }</b>. –ù–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.`,
      inputWaitKb()
    );
  });

  bot.action("draft:ask_access_story", async (ctx) => {
    await setPending(ctx.state.user!.tgId, { kind: "accessStory" });
    await ctx.answerCbQuery();
    await renderForm(ctx);
  });

  bot.action("draft:access_story:all", async (ctx) => {
    await setStoryAccess(ctx.state.user!.tgId, 0);
    await resetPending(ctx.state.user!.tgId);
    await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø: –≤—Å–µ–º");
    await renderForm(ctx, "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: –≤—Å–µ–º");
  });
  bot.action("draft:access_story:premium", async (ctx) => {
    await setStoryAccess(ctx.state.user!.tgId, 1);
    await resetPending(ctx.state.user!.tgId);
    await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø: —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π");
    await renderForm(ctx, "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏: –ø—Ä–µ–º–∏—É–º");
  });

  bot.action(/^draft:ask_end_access:(\d+)$/, async (ctx) => {
    const i = Number(ctx.match[1]);
    await setPending(ctx.state.user!.tgId, { kind: "accessEnding", index: i });
    await ctx.answerCbQuery();
    await renderForm(ctx);
  });

  bot.action(/^draft:end_access_set:(\d+):all$/, async (ctx) => {
    const i = Number(ctx.match[1]);
    await setEndingAccess(ctx.state.user!.tgId, i, 0);
    await resetPending(ctx.state.user!.tgId);
    await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è: –≤—Å–µ–º");
    await renderForm(ctx, `‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é #${i + 1}: –≤—Å–µ–º`);
  });
  bot.action(/^draft:end_access_set:(\d+):premium$/, async (ctx) => {
    const i = Number(ctx.match[1]);
    await setEndingAccess(ctx.state.user!.tgId, i, 1);
    await resetPending(ctx.state.user!.tgId);
    await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è: –ø—Ä–µ–º–∏—É–º");
    await renderForm(ctx, `‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é #${i + 1}: –ø—Ä–µ–º–∏—É–º`);
  });

  bot.action("draft:cancel_access", async (ctx) => {
    await resetPending(ctx.state.user!.tgId);
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    await renderForm(ctx);
  });

  bot.action("draft:add_ending", async (ctx) => {
    const d = await getOrCreateDraft(ctx.state.user!.tgId);
    if (d.endings.length >= 3) {
      await ctx.answerCbQuery("–ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è");
      return;
    }
    const index = d.endings.length;
    await setPending(ctx.state.user!.tgId, { kind: "endingTitle", index });
    aggStart(ctx.state.user!.tgId, ctx.chat!.id, "endingTitle");
    await ctx.answerCbQuery();
    await updateMenu(
      ctx,
      `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è #${
        index + 1
      }</b>. –ù–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.`,
      inputWaitKb()
    );
  });

  bot.action(/^draft:del_end:(\d+)$/, async (ctx) => {
    const i = Number(ctx.match[1]);
    await removeEnding(ctx.state.user!.tgId, i);
    await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
    await renderForm(ctx);
  });

  bot.action("draft:commit", async (ctx) => {
    await ctx.answerCbQuery();
    const tgId = ctx.state.user!.tgId;
    try {
      const d = await getOrCreateDraft(tgId);
      const ready = canCreate({
        title: d.title ?? undefined,
        intro: d.intro ?? undefined,
        endings: d.endings as DraftEnding[],
      });
      if (!ready) {
        await updateMenu(
          ctx,
          "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ù—É–∂–Ω—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—á–∞–ª–æ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.",
          Markup.inlineKeyboard([
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin" }],
          ])
        );
        return;
      }

      const story = await commitDraftToStory(tgId);
      await updateMenu(
        ctx,
        `‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>${html(story.title)}</b> (–æ–∫–æ–Ω. ${
          story.endings.length
        })`,
        Markup.inlineKeyboard([
          [{ text: "üåå –û–ë–õ–û–ñ–ö–ê", callback_data: `cover:add:${story._id}` }],
          [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin" }],
        ])
      );
    } catch (e) {
      console.error("[draft:commit] error:", e);
      await updateMenu(
        ctx,
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
        Markup.inlineKeyboard([[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin" }]])
      );
    }
  });
}
